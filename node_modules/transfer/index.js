"use strict"

var uuid = require('node-uuid');
var BinaryServer = require('binaryjs').BinaryServer;

function Transfer(transferId, fileInfo) {

    var _this = this;

    // Идентификатор передачи
    this.transferId = transferId;

    // Информация о файле
    this.fileInfo = fileInfo;

    // Поток отправителя:
    this.senderStream = {};

    // Поток получателя:
    this.response = {};

    /**
     * Выполнить передачу
     * @param fileStream
     */
    this.performTransfer = function (fileStream) {

        // Подписываемся ошибки:
        this.senderStream.on("close", function () {
            console.error("Sender closed!");
        });

        this.senderStream.on("error", function (error) {
            console.error(error);
        });

        fileStream.on("close", function () {
            console.error("File stream closed!");
        });

        fileStream.on("error", function (error) {
            console.error(error);
        });

        // Будем уведомлять получателя о ходе передачи файла:
        fileStream.on("data", function (data) {

            var transferStatus = {
                command: "transferStatus",
                rx: data.length / fileInfo.size
            };
            _this.senderStream.write(transferStatus);

        });
        fileStream.on("end", function () {
            console.log("Data stream end!");
        });

        // Направляем поток получателю:
        this.response.set('Content-Length', this.fileInfo.size);
        this.response.set('Content-Disposition', 'attachment; filename="' + this.fileInfo.name + '"');
        fileStream.pipe(this.response);
    }

    this.sendFile = function (response) {
        // Сохраняем поток в который будем слать файл:
        this.response = response;
        // Запрашиваем отправителя начать передачу файла:
        this.senderStream.write({transferId: this.transferId, command: "requestFile"});
    }
};

Transfer.transfers = {};

Transfer.init = function (server) {

    var bs = BinaryServer({server: server});

    bs.on('connection', function (client) {

        client.on('stream', function (stream, meta) {

            console.info(meta);

            // Создаём идентификатор передачи:
            var transferId = meta.transferId ? meta.transferId : uuid.v4();
            var transfer = Transfer.transfers[transferId];

            // Если передан неверный идентификатор:
            if (!transfer) {
                // И если это не инициализация новой передачи:
                if (meta.command !== "newTransfer") {
                    stream.write({'command': 'invokeError', message: 'Файл не найден'});
                    return;
                }
            }
            switch (meta.command) {
                // Принимаем запрос от отправителя о передаче файлов:
                case "newTransfer":

                    // Конвертим обратно в байты (binarypack баг):
                    meta.fileInfo.size = Math.round(meta.fileInfo.size * 1024);

                    // Создаём передачу:
                    transfer = Transfer.transfers[transferId] = new Transfer(transferId, meta.fileInfo);

                    // Принимаем запрос и высылаем идентификаторы передачи:
                    stream.write({command: "transferInitialized", transferId: transferId });

                    // Удаляем передачу при закрытии отправителя
                    stream.on('close', function(){
                        delete Transfer.transfers[transferId];
                    });

                    // Сохраняем поток отправителя для последующего общения:
                    transfer.senderStream = stream;
                    break;

                // Подтверджение от отправителя о готовности подавать файл:
                case "sendFile":
                    transfer.performTransfer(stream);
                    break;
            }
        });

    });

}

module.exports = Transfer;